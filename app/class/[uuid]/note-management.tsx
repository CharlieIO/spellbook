/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/XEk7nD8UOZi
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
'use client'
import { Button } from "@/components/ui/button"
import { JSX, SVGProps, useState, useEffect, useCallback } from "react"
import UploadImage from "./UploadImage";
import NoteCard from "./NoteCard";
import { CustomPagination } from "@/components/pagination"; // Import CustomPagination from the correct location
import NoteCardSkeleton from "./NoteCardSkeleton";
import { useImageFetcher } from "./hooks/useImageFetcher"; // Import useImageFetcher hook
import { useFileUploader } from "./hooks/useFileUploader"; // Import useFileUploader hook
import { useImageDeleter } from "./hooks/useImageDeleter"; // Import useImageDeleter hook
import usePagination from "./hooks/usePagination"; // Import usePagination hook

interface NoteManagementProps {
  classUuid: string;
}
export function NoteManagement({ classUuid }: NoteManagementProps) {
  const imagesPerPage = 4;
  const { currentPage, setCurrentPage, handlePreviousPage, handleNextPage } = usePagination(1);
  const { images, totalPages, isLoading, refetchImages } = useImageFetcher(classUuid, currentPage, imagesPerPage);
  const handleUpload = useFileUploader(classUuid); // Use the custom hook for file uploading
  const handleDelete = useImageDeleter(refetchImages); // Use the custom hook for image deletion

  // Update the pagination hook with the total pages once they are fetched
  useEffect(() => {
    setCurrentPage(1); 
  }, [totalPages, setCurrentPage]);

  const enhancedHandleUpload = useCallback(async (files: FileList | null) => {
    if (files) {
      await handleUpload(files);
      refetchImages(); // Refresh images after upload
    }
  }, [handleUpload, refetchImages]);

  return (
    <main className="flex flex-col items-center justify-center w-full h-full p-4 md:p-6 lg:p-8">
      <div className="max-w-3xl w-full">
        <UploadImage onUpload={enhancedHandleUpload} />
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {isLoading ? (
            Array.from({ length: imagesPerPage }, (_, index) => (
              <NoteCardSkeleton key={index} index={index} />
            ))
          ) : (
            images.map((image, index) => (
              <NoteCard key={index} imageSrc={image.url} onDelete={() => handleDelete(image.key)} />
            ))
          )}
        </div>
        {totalPages > 1 && (
        <div className="container mt-4 px-4 md:px-6">
          <CustomPagination currentPage={currentPage} totalPages={totalPages} onPageChange={setCurrentPage} />
        </div>
      )}
      </div>
    </main>
  )
}

function TrashIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}


